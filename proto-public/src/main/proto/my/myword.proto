// Copyright 2015, gRPC Authors
// All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
syntax = "proto3";
package myword;

option java_multiple_files = true;
option java_package = "org.easyhan.myword.grpc";
option java_outer_classname = "MyWordProto";
option objc_class_prefix = "MDT";

import "common/common.proto";

// My word dictionary service definition.
service MyWord {

    // A server-to-client streaming RPC.
    //
    // Obtains hanzis whose types are the given normal/poster/sexy/porn.  Results are
    // streamed rather than returned at once (e.g. in a response message with a
    // repeated field), as the lastUpsertd maybe an very old time and contain a
    // huge number of hanzis.
    rpc List (ListRequest) returns (stream MyWordResponse) {
    }

    rpc Get (GetRequest) returns (MyWordResponse) {
    }

    rpc Upsert (UpsertRequest) returns (UpsertResponse) {
    }

    rpc Delete (DeleteRequest) returns (DeleteResponse) {
    }

    rpc Stats (StatsRequest) returns (stream StatsResponse){}
}


message StatsRequest {
}

message StatsResponse {
    common.HanziLevel level=1;
    int32 numMemory7 = 2;
    int32 numMemory6 = 3;
    int32 numMemory5 = 4;
    int32 numMemory4 = 5;
    int32 numMemory3 = 6;
    int32 numMemory2 = 7;
    int32 numMemory1 = 8;
    int32 numMemory0 = 9;
}

message ListRequest {
    int64 lastUpdated = 1;
}

message MyWordResponse {
    string word = 1;
    int32 memIdx = 2;
    int64 lastUpdated = 3;
}


message GetRequest {
    string word = 1;
}

message UpsertRequest {
    string word = 1;
    int32 progressStep=2;
    bool updateBrokenStrokesMessage = 3;
    string brokenStrokesMessage = 4;
}

message UpsertResponse {
    common.Error error = 1;
    int32 memIdx = 2;
}

message DeleteRequest {
    string word = 1;
}

message DeleteResponse {
    common.Error error = 1;
}
